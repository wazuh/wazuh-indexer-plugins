import org.opensearch.gradle.test.RestIntegTestTask

import java.util.concurrent.Callable

buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "3.0.0-SNAPSHOT")
        opensearch_build = opensearch_version.replace("-SNAPSHOT","") + ".0"
        job_scheduler_version = System.getProperty("job_scheduler.version", opensearch_build)
        wazuh_version = System.getProperty("version", "6.0.0")
        revision = System.getProperty("revision", "0")
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.rest-test'
apply plugin: 'opensearch.pluginzip'
apply plugin: 'opensearch.java-agent'

def pluginName = 'wazuh-indexer-content-manager'
def pluginDescription = 'Wazuh Indexer content manager plugin'
def projectPath = 'com.wazuh'
def pathToPlugin = 'contentmanager'
def pluginClassName = 'ContentManagerPlugin'

publishing {
    publications {
        pluginZip(MavenPublication) { publication ->
            pom {
                name = pluginName
                description = pluginDescription
                licenses {
                    license {
                        name = "GNU Affero General Public License (AGPL) version 3.0"
                        url = "http://www.gnu.org/licenses/agpl-3.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "Wazuh"
                        url = "https://wazuh.com"
                    }
                }
            }
        }
    }
}

allprojects {
    group = "${projectPath}"
    version = "${wazuh_version}" + ".${revision}"
    targetCompatibility = JavaVersion.VERSION_21
    sourceCompatibility = JavaVersion.VERSION_21
}

opensearchplugin {
    name pluginName
    description pluginDescription
    classname "${projectPath}.${pathToPlugin}.${pluginClassName}"
    extendedPlugins = ['opensearch-job-scheduler']
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}

configurations {
  zipArchive
}

dependencies {
    implementation "org.apache.httpcomponents.client5:httpclient5:5.4.4"
    implementation "org.apache.httpcomponents.core5:httpcore5-h2:5.3.4"
    implementation "org.apache.httpcomponents.core5:httpcore5:5.3.4"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.23.1"
    implementation "org.slf4j:slf4j-api:1.7.36"

    // ZipArchive dependencies used for integration tests
    zipArchive group: 'org.opensearch.plugin', name: 'opensearch-job-scheduler', version: "${opensearch_build}"
    // Uncomment this line to load the command-manager plugin from the local Maven repository.
    // Keep it commented to allow GitHub Workflows to run the tests.
    // zipArchive group: 'com.wazuh', name:'wazuh-indexer-command-manager', version: "${wazuh_version}.${revision}"
    compileOnly "org.opensearch:opensearch-job-scheduler-spi:${job_scheduler_version}"
}

// No need to validate license headers since spotless checks and applies it
licenseHeaders.enabled = false

// This requires an additional Jar not published as part of build-tools
loggerUsageCheck.enabled = false

// No need to validate pom, as we do not upload to maven/sonatype
validateNebulaPom.enabled = false

// Skip forbiddenAPIs check on dependencies
thirdPartyAudit.enabled = false

//Skip checking for third party licenses
dependencyLicenses.enabled = false

repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

test {
    include '**/*Tests.class'
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.9'
}

integTest {
    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
    environment "IS_DEV", System.getenv("IS_DEV") ?: "false"
}

testClusters.integTest {
  testDistribution = "ARCHIVE"
  // add customized keystore
  keystore 'indexer.username', 'admin'
  keystore 'indexer.password', 'admin'
  // Installs all registered zipArchive dependencies on integTest cluster nodes
  configurations.zipArchive.asFileTree.each {
    plugin(provider(new Callable<RegularFile>(){
      @Override
      RegularFile call() throws Exception {
        return new RegularFile() {
          @Override
          File getAsFile() {
            return it
          }
        }
      }
    }))
  }
  // This installs our plugin into the testClusters
  plugin(project.tasks.bundlePlugin.archiveFile)
  if (System.getProperty("cluster.debug") != null) {
    def debugPort = 5005
    nodes.forEach { node ->
      node.jvmArgs("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:${debugPort}")
      println "Debugging ${node.name} on port ${debugPort} â€” waiting for debugger to attach..."
      debugPort += 1
    }
  }
  environment "IS_DEV", System.getenv("IS_DEV") ?: "false"
}

run {
    useCluster testClusters.integTest
}

// updateVersion: Task to auto update version to the next development iteration
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
        // String tokenization to support -SNAPSHOT
        ant.replaceregexp(file: 'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags: 'g', byline: true)
    }
}

