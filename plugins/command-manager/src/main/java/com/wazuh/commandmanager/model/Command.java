/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */
package com.wazuh.commandmanager.model;

import org.opensearch.action.ActionRequest;
import org.opensearch.action.ActionRequestValidationException;
import org.opensearch.core.xcontent.ToXContentObject;
import org.opensearch.core.xcontent.XContentBuilder;
import org.opensearch.core.xcontent.XContentParser;

import java.io.IOException;

import static org.opensearch.core.xcontent.XContentParserUtils.ensureExpectedToken;

public class Command extends ActionRequest implements ToXContentObject {

    public static final String ORDER_ID = "order_id";
    public static final String REQUEST_ID = "request_id";
    public static final String SOURCE = "source";
    public static final String TARGET = "target";
    public static final String TIMEOUT = "timeout";
    public static final String TYPE = "type";
    public static final String USER = "user";
    public static final String STATUS = "status";
    public static final String ACTION = "action";
    private final String id;
    private final String orderId;
    private final String requestId;
    private final String source;
    private final String target;
    private final Integer timeout;
    private final String type;
    private final String user;
    private final Status status;
    private final Action action;

    /**
     * Default constructor
     *
     * @param requestID Unique identifier generated by the Command Manager. Auto-incremental.
     * @param orderID   Unique identifier generated by the Command Manager. Auto-incremental within the same Command Request ID.
     * @param source    origin of the request. One
     * @param target    Cluster name destination.
     * @param timeout   Number of seconds to wait for the command to be executed.
     * @param type      action type. One of agent_groups, agent, server.
     * @param user      the user that originated the request
     * @param action    target action type and additional parameters
     */
    public Command(
            String requestID,
            String orderID,
            String source,
            String target,
            Integer timeout,
            String type,
            String user,
            Action action
    ) {
        this.id = orderID + requestID;
        this.requestId = requestID;
        this.orderId = orderID;
        this.source = source;
        this.target = target;
        this.timeout = timeout;
        this.type = type;
        this.user = user;
        this.action = action;
        this.status = Status.PENDING;
    }

    public static Command parse(String requestId, String orderId, XContentParser parser) throws IOException {
        String source = null;
        String target = null;
        Integer timeout = null;
        String type = null;
        String user = null;
        Action action = null;

        // @TODO check if this call is necessary as ensureExpectedToken is invoked previously
        ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser);
        while (parser.nextToken() != XContentParser.Token.END_OBJECT) {
            String fieldName = parser.currentName();
            parser.nextToken();
            switch (fieldName) {
                case SOURCE:
                    source = parser.text();
                    break;
                case TARGET:
                    target = parser.text();
                    break;
                case TIMEOUT:
                    timeout = parser.intValue();
                    break;
                case TYPE:
                    type = parser.text();
                    break;
                case USER:
                    user = parser.text();
                    break;
                case ACTION:
                    action = Action.parse(parser);
                    break;
                default:
                    parser.skipChildren();
                    break;
            }
        }

        return new Command(
                requestId,
                orderId,
                source,
                target,
                timeout,
                type,
                user,
                action
        );
    }

    /**
     * @return
     */
    @Override
    public ActionRequestValidationException validate() {
        return null;
    }

    @Override
    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {
        XContentBuilder xContentBuilder = builder.startObject();

        // @TODO review whether these IFs are necessary
        if (this.source != null) {
            xContentBuilder.field(SOURCE, this.source);
        }
        if (this.user != null) {
            xContentBuilder.field(USER, this.user);
        }
        if (this.target != null) {
            xContentBuilder.field(TARGET, this.target);
        }
        if (this.type != null) {
            xContentBuilder.field(TYPE, this.type);
        }
        if (this.action != null) {
            xContentBuilder.field(ACTION, this.action);
        }
        if (timeout != null) {
            xContentBuilder.field(TIMEOUT, timeout);
        }

        xContentBuilder.field(STATUS, this.status);
        xContentBuilder.field(ORDER_ID, this.orderId);
        xContentBuilder.field(REQUEST_ID, this.requestId);

        return xContentBuilder.endObject();
    }

    /**
     *
     * @return
     */
    public String getOrderId() {
        return this.orderId;
    }

    /**
     *
     * @return
     */
    public String getRequestId() {
        return this.requestId;
    }

    /**
     *
     * @return
     */
    public String getId() {
        return this.id;
    }

//    @Override
//    public boolean equals(Object o) {
//        if (this == o) return true;
//        if (o == null || getClass() != o.getClass()) return false;
//        Command that = (Command) o;
//        return Objects.equals(orderID, that.orderID)
//            && Objects.equals(requestID, that.requestID)
//            && Objects.equals(source, that.source)
//            && Objects.equals(target, that.target)
//            && Objects.equals(timeout, that.timeout)
//            && Objects.equals(type, that.type)
//            && Objects.equals(user, that.user)
//            && Objects.equals(action, that.action)
//            && Objects.equals(result, that.result);
//    }

//    @Override
//    public int hashCode() {
//        return Objects.hash(
//                orderID,
//                requestID,
//                source,
//                target,
//                timeout,
//                type,
//                user,
//                action,
//                result
//        );
//    }


    @Override
    public String toString() {
        return "Command{" +
                "ID='" + id + '\'' +
                ", orderID='" + orderId + '\'' +
                ", requestID='" + requestId + '\'' +
                ", source='" + source + '\'' +
                ", target='" + target + '\'' +
                ", timeout=" + timeout +
                ", type='" + type + '\'' +
                ", user='" + user + '\'' +
                ", status=" + status +
                ", action=" + action +
                '}';
    }
}
